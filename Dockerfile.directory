
FROM node:20-alpine AS base
#  ------------------------------------------------------------
# This stage handles copying all files to ./app then filtering
# only the projects/packages we need.
# ./app/out/json contains the package.jsons of projects/packages we need.
# ./app/out/full contains all the files of the projects/packages we need.
# See -> https://turbo.build/repo/docs/guides/tools/docker
FROM base as builder
WORKDIR /app
COPY . .
RUN npm i -g turbo
RUN turbo prune devnet-directory --docker

#  ------------------------------------------------------------
# This stage handles installing and building the result of the builder stage.
FROM base AS installer
RUN apk add g++ make py3-pip
WORKDIR /app
COPY .gitignore .gitignore
# Copy the package.jsons from /jsons & the lock file
COPY --from=builder /app/out/json/ .
COPY --from=builder /app/out/pnpm-lock.yaml ./pnpm-lock.lock
RUN apk update
RUN apk add --no-cache libc6-compat g++ make py3-pip
# install pnpm, turbo, and prepare the environment
RUN corepack enable && corepack prepare pnpm@latest --activate
RUN pnpm i
# Copy app source files 
COPY --from=builder /app/out/full/ .
RUN pnpm build --filter=devnet-directory

#  ------------------------------------------------------------
# This stage handles copying the installed and built results
# from the installer stage creating a new user (don't run production as root).
FROM base AS runner
RUN addgroup --system --gid 1001 runnergroup
RUN adduser --system --uid 1001 runner
USER runner
COPY --from=installer --chown=runner:runnergroup ./app ./
CMD node apps/devnet-directory/build/index.js